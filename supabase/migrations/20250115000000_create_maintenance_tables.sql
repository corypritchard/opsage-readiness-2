-- Migration: Create FMECA and Maintenance Tasks tables
-- Description: Add persistent storage for FMECA analysis data and generated maintenance tasks

-- Create FMECA projects table
CREATE TABLE public.fmeca_projects (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  file_name TEXT,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Create FMECA data table
CREATE TABLE public.fmeca_data (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  project_id UUID NOT NULL REFERENCES public.fmeca_projects(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  row_data JSONB NOT NULL,
  row_index INTEGER NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  
  -- Ensure unique row indices per project
  UNIQUE(project_id, row_index)
);

-- Create maintenance tasks table
CREATE TABLE public.maintenance_tasks (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  project_id UUID NOT NULL REFERENCES public.fmeca_projects(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  asset TEXT NOT NULL,
  component TEXT NOT NULL,
  failure_mode TEXT,
  task_description TEXT NOT NULL,
  frequency INTEGER,
  frequency_units TEXT,
  maintenance_type TEXT,
  additional_data JSONB, -- For storing any extra columns generated by AI
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Create maintenance task columns metadata table
CREATE TABLE public.maintenance_task_columns (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  project_id UUID NOT NULL REFERENCES public.fmeca_projects(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  column_name TEXT NOT NULL,
  column_order INTEGER NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  
  -- Ensure unique column names per project
  UNIQUE(project_id, column_name)
);

-- Enable Row Level Security on all tables
ALTER TABLE public.fmeca_projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.fmeca_data ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.maintenance_tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.maintenance_task_columns ENABLE ROW LEVEL SECURITY;

-- RLS Policies for fmeca_projects
CREATE POLICY "Users can view their own FMECA projects" 
  ON public.fmeca_projects 
  FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own FMECA projects" 
  ON public.fmeca_projects 
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own FMECA projects" 
  ON public.fmeca_projects 
  FOR UPDATE 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own FMECA projects" 
  ON public.fmeca_projects 
  FOR DELETE 
  USING (auth.uid() = user_id);

-- RLS Policies for fmeca_data
CREATE POLICY "Users can view their own FMECA data" 
  ON public.fmeca_data 
  FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own FMECA data" 
  ON public.fmeca_data 
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own FMECA data" 
  ON public.fmeca_data 
  FOR UPDATE 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own FMECA data" 
  ON public.fmeca_data 
  FOR DELETE 
  USING (auth.uid() = user_id);

-- RLS Policies for maintenance_tasks
CREATE POLICY "Users can view their own maintenance tasks" 
  ON public.maintenance_tasks 
  FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own maintenance tasks" 
  ON public.maintenance_tasks 
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own maintenance tasks" 
  ON public.maintenance_tasks 
  FOR UPDATE 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own maintenance tasks" 
  ON public.maintenance_tasks 
  FOR DELETE 
  USING (auth.uid() = user_id);

-- RLS Policies for maintenance_task_columns
CREATE POLICY "Users can view their own maintenance task columns" 
  ON public.maintenance_task_columns 
  FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own maintenance task columns" 
  ON public.maintenance_task_columns 
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own maintenance task columns" 
  ON public.maintenance_task_columns 
  FOR UPDATE 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own maintenance task columns" 
  ON public.maintenance_task_columns 
  FOR DELETE 
  USING (auth.uid() = user_id);

-- Create indexes for performance
CREATE INDEX idx_fmeca_projects_user_id ON public.fmeca_projects(user_id);
CREATE INDEX idx_fmeca_data_project_id ON public.fmeca_data(project_id);
CREATE INDEX idx_fmeca_data_user_id ON public.fmeca_data(user_id);
CREATE INDEX idx_maintenance_tasks_project_id ON public.maintenance_tasks(project_id);
CREATE INDEX idx_maintenance_tasks_user_id ON public.maintenance_tasks(user_id);
CREATE INDEX idx_maintenance_task_columns_project_id ON public.maintenance_task_columns(project_id);

-- Create function to update updated_at column
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers to automatically update updated_at
CREATE TRIGGER update_fmeca_projects_updated_at
  BEFORE UPDATE ON public.fmeca_projects
  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_fmeca_data_updated_at
  BEFORE UPDATE ON public.fmeca_data
  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_maintenance_tasks_updated_at
  BEFORE UPDATE ON public.maintenance_tasks
  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column(); 